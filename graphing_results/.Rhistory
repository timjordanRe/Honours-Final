theme_minimal()
# Create the grouped bar chart
ggplot(data, aes(x = Model_Type, y = Accuracy, fill = Data_Modality)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Validation Accuracy Between Data Modalities For Models", x = "Category", y = "Value") +
theme_minimal()
# Create the grouped bar chart
ggplot(data, aes(x = Model_Type, y = Accuracy, fill = Data_Modality)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Validation Accuracy Between Data Modalities For Models", x = "Model Type", y = "Accuracy") +
theme_minimal()
# Create the grouped bar chart
ggplot(data, aes(x = Model_Type, y = Accuracy, fill = Data_Modality)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Validation Accuracy Between Data Modalities For Models", x = "Model Type", y = "Accuracy")
# Create the grouped bar chart
ggplot(data, aes(x = Model_Type, y = Accuracy, fill = Data_Modality)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Validation Accuracy Between Data Modalities For Models", x = "Model Type", y = "Accuracy") +
theme_minimal()
# Create a sample dataset (replace this with your own data)
data <- data.frame(
Model_Type = c("CNN", "RNN", "CRNN", "CNN", "RNN", "CRNN"),
Data_Modality = c("Pose", "Pose", "Pose", "Pose + Object", "Pose + Object", "Pose + Object"),
mAP = c(23.33, 32.08, 22.71, 61.26, 41.16, 61.93)
)
# Create the grouped bar chart
ggplot(data, aes(x = Model_Type, y = mAP, fill = Data_Modality)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Validation Accuracy Between Data Modalities For Models", x = "Model Type", y = "Accuracy") +
theme_minimal()
library(gridExtra)
# Create a sample dataset (replace this with your own data)
data <- data.frame(
Category = c("A", "B", "C", "A", "B", "C"),
Group = c("Group 1", "Group 1", "Group 1", "Group 2", "Group 2", "Group 2"),
Value = c(10, 15, 12, 18, 22, 20)
)
# Create the first grouped bar chart
plot1 <- ggplot(data, aes(x = Category, y = Value, fill = Group)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Grouped Bar Chart 1", x = "Category", y = "Value") +
theme_minimal()
# Create a second sample dataset (replace this with your own data)
data2 <- data.frame(
Category = c("X", "Y", "Z", "X", "Y", "Z"),
Group = c("Group A", "Group A", "Group A", "Group B", "Group B", "Group B"),
Value = c(8, 12, 14, 16, 20, 18)
)
# Create the second grouped bar chart
plot2 <- ggplot(data2, aes(x = Category, y = Value, fill = Group)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Grouped Bar Chart 2", x = "Category", y = "Value") +
theme_minimal()
# Arrange the subplots in a 1x2 grid
grid.arrange(plot1, plot2, ncol = 2)
# Create a sample dataset (replace this with your own data)
data <- data.frame(
Model_Type = c("CNN", "RNN", "CRNN", "CNN", "RNN", "CRNN"),
Data_Modality = c("Pose", "Pose", "Pose", "Pose + Object", "Pose + Object", "Pose + Object"),
mAP = c(23.33, 32.08, 22.71, 61.26, 41.16, 61.93)
)
# Create the grouped bar chart
plot1 = ggplot(data, aes(x = Model_Type, y = mAP, fill = Data_Modality)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Validation Accuracy Between Data Modalities For Models", x = "Model Type", y = "Accuracy") +
theme_minimal()
# Create a sample dataset (replace this with your own data)
data <- data.frame(
Model_Type = c("CNN", "RNN", "CRNN", "CNN", "RNN", "CRNN"),
Data_Modality = c("Pose", "Pose", "Pose", "Pose + Object", "Pose + Object", "Pose + Object"),
Accuracy = c(28.48, 34.46, 28.7, 58.76, 40.31, 60.55)
)
# Create the grouped bar chart
plot1 = ggplot(data, aes(x = Model_Type, y = Accuracy, fill = Data_Modality)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Validation Accuracy Between Data Modalities For Models", x = "Model Type", y = "Accuracy") +
theme_minimal()
# Create a sample dataset (replace this with your own data)
data2 <- data.frame(
Model_Type = c("CNN", "RNN", "CRNN", "CNN", "RNN", "CRNN"),
Data_Modality = c("Pose", "Pose", "Pose", "Pose + Object", "Pose + Object", "Pose + Object"),
mAP = c(23.33, 32.08, 22.71, 61.26, 41.16, 61.93)
)
plot2
# Create the grouped bar chart
plot2 = ggplot(data2, aes(x = Model_Type, y = mAP, fill = Data_Modality)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "mAP Between Data Modalities For Each Model", x = "Model Type", y = "mAP") +
theme_minimal()
# Create the grouped bar chart
plot2 = ggplot(data2, aes(x = Model_Type, y = mAP, fill = Data_Modality)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "mAP Between Data Modalities For Models", x = "Model Type", y = "mAP") +
theme_minimal()
plot2
grid.arrange(plot1, plot2, ncol = 2)
grid.arrange(plot1, plot2, ncol = 2)
# Create the grouped bar chart
plot1 = ggplot(data, aes(x = Model_Type, y = Accuracy, fill = Data_Modality)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Accuracy Between Data Modalities For Models", x = "Model Type", y = "Accuracy") +
theme_minimal()
grid.arrange(plot1, plot2, ncol = 2)
# Modify the legend to remove it from the second subplot
plot1 <- plot1 + guides(fill = FALSE)
plot1
# Create a sample dataset (replace this with your own data)
data2 <- data.frame(
Model_Type = c("CNN", "RNN", "CRNN", "CNN", "RNN", "CRNN"),
Data_Modality = c("Pose", "Pose", "Pose", "Pose + Object", "Pose + Object", "Pose + Object"),
mAP = c(23.33, 32.08, 22.71, 61.26, 41.16, 61.93)
)
# Create the grouped bar chart
plot2 = ggplot(data2, aes(x = Model_Type, y = mAP, fill = Data_Modality)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "mAP Between Data Modalities For Models", x = "Model Type", y = "mAP") +
theme_minimal()
grid.arrange(plot1, plot2, ncol = 2)
# Load the ggplot2 package
library(ggplot2)
# Create sample data with multiple groups
set.seed(42)
groups <- rep(c("Group A", "Group B", "Group C"), each = 100)
values <- rnorm(300)
data <- data.frame(Group = groups, Values = values)
# Create a grouped boxplot using ggplot2
ggplot(data, aes(x = Group, y = Values, fill = Group)) +
geom_boxplot() +
# Customizing appearance
labs(x = "Group", y = "Values", title = "Grouped Boxplot") +
theme_minimal()
# library
library(ggplot2)
# create a data frame
variety=rep(LETTERS[1:7], each=40)
treatment=rep(c("high","low"),each=20)
note=seq(1:280)+sample(1:150, 280, replace=T)
data=data.frame(variety, treatment ,  note)
# grouped boxplot
ggplot(data, aes(x=variety, y=note, fill=treatment)) +
geom_boxplot()
data
treatment
data
aeq_rf_cen =[350.2000000476837, 347.7979998588562, 323.99399995803833, 303.5239999294281, 386.8880000114441, 407.67199993133545, 303.85700011253357, 304.57599997520447, 262.9670000076294, 427.40300011634827, 387.3619999885559, 323.69799995422363, 427.3050000667572, 448.28200006484985, 408.00300002098083, 323.50600004196167, 303.4980001449585, 302.95899987220764, 304.65900015830994, 324.643000125885, 264.029000043869, 445.9470000267029, 367.31500005722046, 241.67499995231628, 283.39599990844727]
aeq_rf_cen =c(350.2000000476837, 347.7979998588562, 323.99399995803833, 303.5239999294281, 386.8880000114441, 407.67199993133545, 303.85700011253357, 304.57599997520447, 262.9670000076294, 427.40300011634827, 387.3619999885559, 323.69799995422363, 427.3050000667572, 448.28200006484985, 408.00300002098083, 323.50600004196167, 303.4980001449585, 302.95899987220764, 304.65900015830994, 324.643000125885, 264.029000043869, 445.9470000267029, 367.31500005722046, 241.67499995231628, 283.39599990844727)
aeq_rf_cen
aeq_rf_cen_norm = c(350.2000000476837, 347.7979998588562, 323.99399995803833, 303.5239999294281, 386.8880000114441, 407.67199993133545, 303.85700011253357, 304.57599997520447, 262.9670000076294, 427.40300011634827, 387.3619999885559, 323.69799995422363, 427.3050000667572, 448.28200006484985, 408.00300002098083, 323.50600004196167, 303.4980001449585, 302.95899987220764, 304.65900015830994, 324.643000125885, 264.029000043869, 445.9470000267029, 367.31500005722046, 241.67499995231628, 283.39599990844727)
aeq_rf_cen_mod = c(246.53200006484985, 152.75600004196167, 237.2149999141693, 266.2449998855591, 204.53400015830994, 235.2480001449585, 204.80400013923645, 214.80100011825562, 163.6800000667572, 277.5840001106262, 214.9229998588562, 223.00499987602234, 225.80800008773804, 288.33700013160706, 214.85199999809265, 225.30800008773804, 214.30799984931946, 287.0940001010895, 258.93699979782104, 204.56100010871887, 246.93200016021729, 248.55400013923645, 267.9870002269745, 204.65699982643127, 247.08699989318848)
kosei_rf_cen_norm = c(417.78050088882446, 438.62150025367737, 438.62350034713745, 437.79349851608276, 439.0174984931946, 437.7400002479553, 438.43250584602356, 440.37349939346313, 437.7695007324219, 438.4144992828369, 437.7520008087158, 439.6995003223419, 438.45249819755554, 437.3564987182617, 437.6375002861023, 437.7690007686615, 437.8264994621277, 436.8805003166199, 438.7080008983612, 433.6775002479553, 437.1909999847412, 436.4099988937378, 438.4670009613037, 436.80950236320496, 399.95949959754944)
kosei_rf_cen_mod = c(419.6294996738434, 437.4995005130768, 436.9539999961853, 436.42450046539307, 435.8205015659332, 435.83150005340576, 437.5935001373291, 438.41750025749207, 435.8849985599518, 435.32450127601624, 434.88950085639954, 439.16199803352356, 437.29750061035156, 436.6690001487732, 437.375, 435.7605004310608,
436.3715012073517, 435.51550102233887, 438.92700147628784, 432.51100182533264, 436.6639847755432, 435.73900151252747, 437.0095012187958, 436.28599977493286, 400.4654965400696)
expga_rf_cen_norm = c(417.78050088882446, 438.62150025367737, 438.62350034713745, 437.79349851608276, 439.0174984931946, 437.7400002479553, 438.43250584602356, 440.37349939346313, 437.7695007324219, 438.4144992828369, 437.7520008087158, 439.6995003223419, 438.45249819755554, 437.3564987182617, 437.6375002861023, 437.7690007686615, 437.8264994621277, 436.8805003166199, 438.7080008983612, 433.6775002479553, 437.1909999847412, 436.4099988937378, 438.4670009613037, 436.80950236320496, 399.95949959754944)
expga_rf_cen_mod = c(419.6294996738434, 437.4995005130768, 436.9539999961853, 436.42450046539307, 435.8205015659332, 435.83150005340576, 437.5935001373291, 438.41750025749207, 435.8849985599518, 435.32450127601624, 434.88950085639954, 439.16199803352356, 437.29750061035156, 436.6690001487732, 437.375, 435.7605004310608,
436.3715012073517, 435.51550102233887, 438.92700147628784, 432.51100182533264, 436.6639847755432, 435.73900151252747, 437.0095012187958, 436.28599977493286, 400.4654965400696)
algo=rep(c('Aequitas', 'KOSEI', 'ExpGA'), each=25)
algo
algo=rep(c('Aequitas', 'KOSEI', 'ExpGA'), each=50)
algo
algo=rep(c('Normal', 'Modified'), each=50)
algo
types =c('Normal', 'Modified')
algo = rep(c('Aequitas', 'KOSEI', 'ExpGA'), each=2)
algo
treatment
note
aeq_rf_cen_norm+ aeq_rf_cen_mod
data=data.frame(types, c(aeq_rf_cen_norm,aeq_rf_cen_mod,
kosei_rf_cen_norm,kosei_rf_cen_mod,
expga_rf_cen_norm,expga_rf_cen_mod) ,  algo)
data
execution_times =c(aeq_rf_cen_norm,aeq_rf_cen_mod,
kosei_rf_cen_norm,kosei_rf_cen_mod,
expga_rf_cen_norm,expga_rf_cen_mod)
data=data.frame(types,  execution_times,  algo)
execution_times =c(aeq_rf_cen_norm,aeq_rf_cen_mod,
kosei_rf_cen_norm,kosei_rf_cen_mod,
expga_rf_cen_norm,expga_rf_cen_mod)
version =c('Normal', 'Modified')
algorithm = rep(c('Aequitas', 'KOSEI', 'ExpGA'), each=2)
data=data.frame(version,  execution_times,  algorithm)
data
algorithm = rep(c('Aequitas', 'KOSEI', 'ExpGA'), each=50)
version =rep(c('Normal', 'Modified'), each=25)
algorithm = rep(c('Aequitas', 'KOSEI', 'ExpGA'), each=50)
data=data.frame(version,  execution_times,  algorithm)
data
ggplot(data, aes(x=algorithm, y=execution_times, fill=version)) +
geom_boxplot()
df$algorithm
df[df$algorithm %in% c('KOSEI', 'ExpGA')]
data[data$algorithm %in% c('KOSEI', 'ExpGA')]
data[data$algorithm %in% c('KOSEI', 'ExpGA')]
data
data$algorithm
data[data$algorithm %in% c('KOSEI', 'ExpGA')]
data[data$algorithm %in% c('KOSEI', 'ExpGA')]
data$algorithm %in% c('KOSEI', 'ExpGA')
data[data$algorithm %in% c('KOSEI', 'ExpGA'),]
data[data$algorithm %in% c('KOSEI', 'ExpGA'), ]
data = data[data$algorithm %in% c('KOSEI', 'ExpGA'), ]
ggplot(data, aes(x=algorithm, y=execution_times, fill=version)) +
geom_boxplot()
min(expga_rf_cen_mod)
min(expga_rf_cen_norm)
max(expga_rf_cen_mod)
max(expga_rf_cen_norm)
aeq_rf_cen_norm = c(350.2000000476837, 347.7979998588562, 323.99399995803833, 303.5239999294281, 386.8880000114441, 407.67199993133545, 303.85700011253357, 304.57599997520447, 262.9670000076294, 427.40300011634827, 387.3619999885559, 323.69799995422363, 427.3050000667572, 448.28200006484985, 408.00300002098083, 323.50600004196167, 303.4980001449585, 302.95899987220764, 304.65900015830994, 324.643000125885, 264.029000043869, 445.9470000267029, 367.31500005722046, 241.67499995231628, 283.39599990844727)
aeq_rf_cen_mod = c(246.53200006484985, 152.75600004196167, 237.2149999141693, 266.2449998855591, 204.53400015830994, 235.2480001449585, 204.80400013923645, 214.80100011825562, 163.6800000667572, 277.5840001106262, 214.9229998588562, 223.00499987602234, 225.80800008773804, 288.33700013160706, 214.85199999809265, 225.30800008773804, 214.30799984931946, 287.0940001010895, 258.93699979782104, 204.56100010871887, 246.93200016021729, 248.55400013923645, 267.9870002269745, 204.65699982643127, 247.08699989318848)
aeq_mlpc_cen_norm = c(1038.4030001163483, 1164.5720000267029, 1265.2219998836517, 982.114000082016, 1028.6289999485016, 1074.7070000171661, 898.7880001068115, 1245.875,
1045.483999967575, 776.4729998111725, 1151.4249999523163, 1108.1370000839233, 1109.2380001544952, 1015.0289998054504, 1110.5369999408722, 1063.095999956131, 837.5899999141693, 708.7109999656677, 1152.5179998874664, 840.3210000991821, 1450.9560000896454, 1238.2139999866486, 1058.5520000457764, 1056.7220001220703, 793.7159998416901)
aeq_mlpc_cen_mod = c(4665.503000020981, 4961.633999824524, 4911.559000015259, 4481.203999996185, 4134.286999940872, 3784.228000164032, 3711.4900000095367, 3799.7419998645782, 4400.500999927521, 3773.0299999713898, 3890.579999923706, 4326.611999988556, 4300.15900015831, 3915.3759999275208, 3491.4700000286102, 4330.956000089645, 4414.898000001907, 3862.2229998111725, 3664.6019999980927, 3951.864000082016, 3479.8420000076294, 3668.6600000858307, 3984.934000015259, 4168.024999856949, 4354.467000007629)
aeq_dt_cen_norm = c(14.628999948501587, 3.494999885559082, 10.471999883651733, 14.2260000705719, 6.831000089645386, 3.308000087738037, 6.796000003814697, 3.3350000381469727, 3.427000045776367, 3.261000156402588, 3.4579999446868896, 3.3459999561309814, 3.3370001316070557, 10.157999992370605, 3.243000030517578, 6.773000001907349, 7.014000177383423, 4.01200008392334, 12.236000061035156, 10.561000108718872, 3.4769999980926514, 10.48800015449524, 10.45199990272522, 6.837000131607056, 3.425999879837036)
aeq_dt_cen_mod = c(3.56000018119812, 10.98799991607666, 7.250999927520752, 10.906999826431274, 10.659000158309937, 21.84500002861023, 11.01799988746643, 7.164999961853027, 3.4630000591278076, 7.063999891281128, 10.782999992370605, 7.187999963760376, 11.0, 3.565999984741211, 10.825000047683716, 7.625, 11.508999824523926, 7.250999927520752, 3.546999931335449, 7.267999887466431, 3.5379998683929443, 7.2850000858306885, 7.03000020980835, 14.309999942779541, 7.196000099182129)
kosei_rf_cen_norm = c(417.78050088882446, 438.62150025367737, 438.62350034713745, 437.79349851608276, 439.0174984931946, 437.7400002479553, 438.43250584602356, 440.37349939346313, 437.7695007324219, 438.4144992828369, 437.7520008087158, 439.6995003223419, 438.45249819755554, 437.3564987182617, 437.6375002861023, 437.7690007686615, 437.8264994621277, 436.8805003166199, 438.7080008983612, 433.6775002479553, 437.1909999847412, 436.4099988937378, 438.4670009613037, 436.80950236320496, 399.95949959754944)
kosei_rf_cen_mod = c(419.6294996738434, 437.4995005130768, 436.9539999961853, 436.42450046539307, 435.8205015659332, 435.83150005340576, 437.5935001373291, 438.41750025749207, 435.8849985599518, 435.32450127601624, 434.88950085639954, 439.16199803352356, 437.29750061035156, 436.6690001487732, 437.375, 435.7605004310608,
436.3715012073517, 435.51550102233887, 438.92700147628784, 432.51100182533264, 436.6639847755432, 435.73900151252747, 437.0095012187958, 436.28599977493286, 400.4654965400696)
kosei_mlpc_cen_norm = c(144.9579999446869, 166.2869999408722, 128.35899996757507, 148.1560001373291, 114.05099987983704, 105.65899991989136, 99.80200004577637, 108.60099983215332, 105.38100004196167, 100.18400001525879, 112.00699996948242, 106.95099997520447, 112.03600001335144, 106.23099994659424, 121.5640001296997, 86.91799998283386, 102.45499992370605, 109.35400009155273, 94.28400015830994, 115.34100008010864, 124.88499999046326, 90.22399997711182, 102.83399987220764, 96.85999989509583, 102.79500007629395)
kosei_mlpc_cen_mod = c(145.62299990653992, 124.68699979782104, 203.66100001335144, 122.5329999923706, 133.62800002098083, 107.30999994277954, 119.69799995422363, 100.07599997520447, 113.91400003433228, 115.95799994468689, 111.79100012779236, 100.90100002288818, 127.93499994277954, 109.57200002670288, 125.75099992752075, 106.37299990653992, 110.51999998092651, 95.11400008201599, 88.65899991989136, 114.66700005531311, 103.6819999217987, 103.90300011634827, 100.77999997138977, 98.25299978256226, 82.82099986076355)
kosei_dt_cen_norm = c(4.079999923706055, 4.49399995803833, 4.086999893188477, 3.740999937057495, 4.233000040054321, 3.816999912261963, 3.8409998416900635, 4.134000062942505, 4.135999917984009, 4.371999979019165, 4.0959999561309814, 4.276000022888184, 3.884000062942505, 3.8310000896453857, 3.997999906539917, 3.7839999198913574, 4.016999959945679, 3.799999952316284, 4.0269999504089355, 4.421000003814697, 4.062999963760376, 3.7849998474121094, 3.803999900817871, 4.068000078201294, 3.753999948501587)
kosei_dt_cen_mod = c(3.505999803543091, 3.8580000400543213, 3.9059998989105225, 3.5870001316070557, 3.569999933242798, 3.884999990463257, 3.3899998664855957, 3.5749998092651367, 3.3630001544952393, 3.3359999656677246, 3.5160000324249268, 3.3559999465942383, 3.309999942779541, 3.5950000286102295, 3.55400013923645, 3.368000030517578, 3.3399999141693115, 3.5269999504089355, 3.305999994277954, 3.5820000171661377, 3.561999797821045, 3.5329999923706055, 3.5799999237060547, 3.5429999828338623, 3.546999931335449)
expga_rf_cen_norm = c(417.78050088882446, 438.62150025367737, 438.62350034713745, 437.79349851608276, 439.0174984931946, 437.7400002479553, 438.43250584602356, 440.37349939346313, 437.7695007324219, 438.4144992828369, 437.7520008087158, 439.6995003223419, 438.45249819755554, 437.3564987182617, 437.6375002861023, 437.7690007686615, 437.8264994621277, 436.8805003166199, 438.7080008983612, 433.6775002479553, 437.1909999847412, 436.4099988937378, 438.4670009613037, 436.80950236320496, 399.95949959754944)
expga_rf_cen_mod = c(419.6294996738434, 437.4995005130768, 436.9539999961853, 436.42450046539307, 435.8205015659332, 435.83150005340576, 437.5935001373291, 438.41750025749207, 435.8849985599518, 435.32450127601624, 434.88950085639954, 439.16199803352356, 437.29750061035156, 436.6690001487732, 437.375, 435.7605004310608,
436.3715012073517, 435.51550102233887, 438.92700147628784, 432.51100182533264, 436.6639847755432, 435.73900151252747, 437.0095012187958, 436.28599977493286, 400.4654965400696)
expga_mlpc_cen_norm = c(446.2785007953644, 446.21799778938293, 445.5425000190735, 448.26799869537354, 444.6334993839264, 448.27049922943115, 447.48649978637695, 443.56149983406067, 444.7194998264313, 447.912499666214, 448.1739983558655, 447.41849994659424, 445.57349824905396, 445.57849860191345, 448.6994993686676, 443.95950055122375, 446.53100061416626, 448.182000875473, 442.4944989681244, 446.51749992370605, 445.7000005245209, 447.54199838638306, 446.37999987602234, 392.91350293159485, 345.46549892425537)
expga_mlpc_cen_mod = c(445.9124994277954, 449.2400026321411, 449.17500138282776, 446.72350025177, 447.65099906921387, 446.87650084495544, 451.8450016975403, 448.05899953842163, 445.6510009765625, 449.8729999065399, 448.2880001068115, 446.82949900627136, 448.480500459671, 450.1074993610382, 447.76450061798096, 450.4439980983734, 449.69499921798706, 445.0629994869232, 443.21550154685974, 449.5474991798401, 446.7304983139038, 448.0604991912842, 444.7110002040863, 380.3794870376587, 357.62813091278076)
expga_dt_cen_norm = c(40.93049764633179, 47.85350012779236, 46.88199853897095, 45.68449926376343, 45.676499366760254, 47.96549987792969, 45.94449853897095, 46.03900122642517, 45.28950023651123, 46.41250014305115, 47.97949957847595, 45.97550177574158, 45.795498847961426, 45.633500814437866, 45.662498474121094, 48.558499574661255, 45.63050031661987, 45.905500411987305, 44.9809992313385, 45.51899981498718, 48.02150082588196, 46.06100010871887, 45.9834988117218, 46.29400134086609,
36.43000054359436)
expga_dt_cen_mod = c(45.651999711990356, 45.013500928878784, 45.326000928878784, 44.821998596191406, 45.0670006275177, 47.947497844696045, 43.99400043487549, 44.9019980430603, 44.864001750946045, 45.58749961853027, 47.263500928878784, 44.647499322891235, 44.34050107002258, 44.69649863243103, 44.516002893447876, 47.71999955177307, 45.337498903274536, 45.4060001373291, 44.59749960899353, 44.9040002822876, 46.89699983596802, 46.01049995422363, 45.196001291275024, 44.567498207092285, 38.593499183654785)
execution_times =c(aeq_rf_cen_norm ,
aeq_rf_cen_mod ,
aeq_mlpc_cen_norm ,
aeq_mlpc_cen_mod ,
aeq_dt_cen_norm ,
aeq_dt_cen_mod ,
kosei_rf_cen_norm ,
kosei_rf_cen_mod ,
kosei_mlpc_cen_norm ,
kosei_mlpc_cen_mod ,
kosei_dt_cen_norm ,
kosei_dt_cen_mod ,
expga_rf_cen_norm ,
expga_rf_cen_mod ,
expga_mlpc_cen_norm ,
expga_mlpc_cen_mod ,
expga_dt_cen_norm ,
expga_dt_cen_mod)
25*6
execution_times =c(aeq_rf_cen_norm ,
aeq_rf_cen_mod ,
aeq_mlpc_cen_norm ,
aeq_mlpc_cen_mod ,
aeq_dt_cen_norm ,
aeq_dt_cen_mod ,
kosei_rf_cen_norm ,
kosei_rf_cen_mod ,
kosei_mlpc_cen_norm ,
kosei_mlpc_cen_mod ,
kosei_dt_cen_norm ,
kosei_dt_cen_mod ,
expga_rf_cen_norm ,
expga_rf_cen_mod ,
expga_mlpc_cen_norm ,
expga_mlpc_cen_mod ,
expga_dt_cen_norm ,
expga_dt_cen_mod)
version =rep(c('Normal', 'Modified'), each=25)
algorithm = rep(c('Aequitas', 'KOSEI', 'ExpGA'), each=150)
data=data.frame(version,  execution_times,  algorithm)
data
version =rep(c('Normal', 'Modified'), each=25)
algorithm = rep(c('Aequitas', 'KOSEI', 'ExpGA'), each=150)
ML_under_test = rep(c('RF','MLPC','DT'), each=50)
data=data.frame(version,  execution_times,  algorithm)
data
data=data.frame(version,  execution_times,  algorithm, ML_under_test)
data
ggplot(data, aes(x=algorithm, y=execution_times, fill=version)) +
geom_boxplot()
# ML_under_test
# algorithm
df = data[data$ML_under_test %in% c('RF', ]
ggplot(data, aes(x=algorithm, y=execution_times, fill=version)) +
geom_boxplot()
# ML_under_test
# algorithm
df = data[data$ML_under_test %in% c('RF'), ]
ggplot(df, aes(x=algorithm, y=execution_times, fill=version)) +
geom_boxplot()
# ML_under_test
# algorithm
df = data[data$algorithm %in% c('Aequitas'), ]
ggplot(df, aes(x=algorithm, y=execution_times, fill=version)) +
geom_boxplot()
df
ggplot(df, aes(x=ML_under_test, y=execution_times, fill=version)) +
geom_boxplot()
# ML_under_test
# algorithm
df = data[data$algorithm %in% c('KOSEI'), ]
df
ggplot(df, aes(x=ML_under_test, y=execution_times, fill=version)) +
geom_boxplot()
# ML_under_test
# algorithm
df = data[data$algorithm %in% c('MLPC'), ]
df
ggplot(df, aes(x=ML_under_test, y=execution_times, fill=version)) +
geom_boxplot()
# ML_under_test
# algorithm
df = data[data$algorithm %in% c('ExpGA'), ]
df
ggplot(df, aes(x=ML_under_test, y=execution_times, fill=version)) +
geom_boxplot()
# ML_under_test
# algorithm
df = data %>% mutate(B_log_scaled = log(execution_times))
# ML_under_test
# algorithm
df <- data %>% mutate(B_log_scaled = log(execution_times))
df
library(dplyr)
# ML_under_test
# algorithm
df <- data %>% mutate(B_log_scaled = log(execution_times))
df
ggplot(df, aes(x=ML_under_test, y=execution_times, fill=version)) +
geom_boxplot()
# ML_under_test
# algorithm
df <- data %>% mutate(B_log_scaled = log(execution_times))
df = df[df$algorithm %in% c('ExpGA'), ]
df
# ML_under_test
# algorithm
df <- data %>% mutate(log_execution_time = log(execution_times))
df = df[df$algorithm %in% c('ExpGA'), ]
df
ggplot(df, aes(x=ML_under_test, y=log_execution_time, fill=version)) +
geom_boxplot()
# ML_under_test
# algorithm
df <- data %>% mutate(log_execution_time = log(execution_times))
df = df[df$ML_under_test %in% c('KOSEI'), ]
df
ggplot(df, aes(x=algorithm, y=log_execution_time, fill=version)) +
geom_boxplot()
# ML_under_test
# algorithm
df <- data %>% mutate(log_execution_time = log(execution_times))
df = df[df$ML_under_test %in% c('RF'), ]
df
ggplot(df, aes(x=algorithm, y=log_execution_time, fill=version)) +
geom_boxplot()
df
df = df[df$algorithm %in% c('Aequitas'), ]
df
ggplot(df, aes(x=ML_under_test, y=log_execution_time, fill=version)) +
geom_boxplot()
# ML_under_test
# algorithm
df <- data %>% mutate(log_execution_time = log(execution_times))
df = df[df$algorithm %in% c('Aequitas'), ]
df
ggplot(df, aes(x=ML_under_test, y=log_execution_time, fill=version)) +
geom_boxplot()
ggplot(df, aes(x=ML_under_test, y=execution_times, fill=version)) +
geom_boxplot()
log_execution_time
ggplot(df, aes(x=ML_under_test, y=log_execution_time, fill=version)) +
geom_boxplot()
# ML_under_test
# algorithm
data <- data %>% mutate(log_execution_time = log(execution_times))
df = data[data$algorithm %in% c('KOSEI'), ]
ggplot(df, aes(x=ML_under_test, y=log_execution_time, fill=version)) +
geom_boxplot()
df = data[data$algorithm %in% c('ExpGA'), ]
ggplot(df, aes(x=ML_under_test, y=log_execution_time, fill=version)) +
geom_boxplot()
df = data[data$ML_under_test %in% c('RF'), ]
ggplot(df, aes(x=algorithm, y=log_execution_time, fill=version)) +
geom_boxplot()
df = data[data$ML_under_test %in% c('MLPC'), ]
ggplot(df, aes(x=algorithm, y=log_execution_time, fill=version)) +
geom_boxplot()
df = data[data$ML_under_test %in% c('MLPC'), ]
ggplot(df, aes(x=algorithm, y=log_execution_time, fill=version)) +
geom_boxplot()
df = data[data$ML_under_test %in% c('Census'), ]
ggplot(df, aes(x=algorithm, y=log_execution_time, fill=version)) +
geom_boxplot()
df = data[data$ML_under_test %in% c('DT'), ]
ggplot(df, aes(x=algorithm, y=log_execution_time, fill=version)) +
geom_boxplot()
df = data[data$ML_under_test %in% c('DT'), ]
df = df[df$algorithm %in% c('ExpGA'), ]
ggplot(df, aes(x=algorithm, y=log_execution_time, fill=version)) +
geom_boxplot()
df = data[data$algorithm %in% c('Aequitas'), ]
ggplot(df, aes(x=ML_under_test, y=log_execution_time, fill=version)) +
geom_boxplot()
df = data[data$algorithm %in% c('KOSEI'), ]
ggplot(df, aes(x=ML_under_test, y=log_execution_time, fill=version)) +
geom_boxplot()
# Create a barcode chart
barcode_chart <- ggplot(data, aes(x = Category, y = Value)) +
geom_segment(aes(xend = Category, yend = 0), color = "steelblue", size = 3) +
geom_point(color = "steelblue", size = 4) +
labs(title = "Barcode Chart", x = "Category", y = "Value") +
theme_minimal()
# Show the chart
print(barcode_chart)
# Sample data
data <- data.frame(
Category = c("A", "B", "C", "D", "E"),
Value = c(5, 8, 3, 10, 6)
)
# Create a barcode chart
barcode_chart <- ggplot(data, aes(x = Category, y = Value)) +
geom_segment(aes(xend = Category, yend = 0), color = "steelblue", size = 3) +
geom_point(color = "steelblue", size = 4) +
labs(title = "Barcode Chart", x = "Category", y = "Value") +
theme_minimal()
# Show the chart
print(barcode_chart)
version =rep(c('Normal', 'Modified'), each=25)
algorithm = rep(c('Aequitas', 'KOSEI', 'ExpGA'), each=150)
ML_under_test = rep(c('RF','MLPC','DT'), each=50)
data=data.frame(version,  execution_times,  algorithm, ML_under_test)
df
mean(aeq_rf_cen_norm)
c(mean(aeq_rf_cen_norm) - mean(aeq_rf_cen_mod),
mean(aeq_mlpc_cen_norm) - mean(aeq_mlpc_cen_mod),
mean(aeq_dt_cen_norm) - mean(aeq_dt_cen_mod),
mean(kosei_rf_cen_norm) - mean(kosei_rf_cen_mod),
mean(kosei_mlpc_cen_norm) - mean(kosei_mlpc_cen_mod),
mean(kosei_dt_cen_norm) - mean(kosei_dt_cen_mod),
mean(expga_rf_cen_norm) - mean(expga_rf_cen_mod),
mean(expga_mlpc_cen_norm) - mean(expga_mlpc_cen_mod),
mean(expga_dt_cen_norm) - mean(expga_dt_cen_mod))
# Load necessary library
library(readxl)
library(ComplexHeatmap)
# Read data from Excel
data <- read_excel("G:/Monash_University/Year5/Honours_Final/Bank p-values.xlsx")
data =as.data.frame(data)
rownames(data) <- data$Feature
data <- data[,-1]  # Remove the first column as it's now row names
data = data[-1,] # Remove sensitive attribute
data = data.frame(lapply(data, function(x) as.numeric(as.character(x))),
check.names=F, row.names = rownames(data))
data = abs(data) # convert to absolute values
data
# Use heatmap function to create the heatmap
heatmap(as.matrix(data), Colv = NA, scale = "row", margins = c(5, 10))
pheatmap(as.matrix(data), clustering_distance_rows = "euclidean", clustering_distance_cols = "euclidean",
clustering_method = "complete", scale = "row", show_rownames = True, show_colnames = True,
color = colorRampPalette(c("blue", "white", "red"))(50))
# Read data from Excel
data <- read_excel("G:/Monash_University/Year5/Honours_Final/Bank p-values.xlsx")
data =as.data.frame(data)
rownames(data) <- data$Feature
data <- data[,-1]  # Remove the first column as it's now row names
data = data[-1,] # Remove sensitive attribute
data = data.frame(lapply(data, function(x) as.numeric(as.character(x))),
check.names=F, row.names = rownames(data))
data = abs(data) # convert to absolute values
data
# Read data from Excel
data <- read_excel("G:/Monash_University/Year5/Honours_Final/Bank p-values.xlsx")
data
setwd("G:/Monash_University/Year5/Honours_Final/graphing_results")
# Read data from Excel
data <- read_excel("G:/Monash_University/Year5/Honours_Final/Bank p-values.xlsx")
data =as.data.frame(data)
data
# Load necessary library
library(readxl)
library(ComplexHeatmap)
# Read data from Excel
data <- read_excel("G:/Monash_University/Year5/Honours_Final/Bank p-values.xlsx")
# Assuming the first column is the row names (features)
data
# Load necessary library
library(ComplexHeatmap)
library(readxl)
# Read data from Excel
data <- read_excel("G:/Monash_University/Year5/Honours_Final/Bank p-values.xlsx")
# Assuming the first column is the row names (features)
data
View(data2)
rm(list = ls())
# Load necessary library
library(ComplexHeatmap)
library(readxl)
# Read data from Excel
data <- read_excel("G:/Monash_University/Year5/Honours_Final/Bank p-values.xlsx")
# Assuming the first column is the row names (features)
data
# Assuming the first column is the row names (features)
data
# Read data from Excel
data <- read_excel("G:/Monash_University/Year5/Honours_Final/Bank p-values.xlsx")
# Assuming the first column is the row names (features)
data
library(readxl)
rm(list = ls())
# Read data from Excel
data <- read_excel("G:/Monash_University/Year5/Honours_Final/Bank p-values.xlsx")
